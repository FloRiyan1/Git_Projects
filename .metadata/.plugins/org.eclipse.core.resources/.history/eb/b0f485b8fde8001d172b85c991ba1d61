package test;

import java.security.*;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

import java.nio.charset.StandardCharsets;
import java.security.Key;
import java.security.KeyPair;

public class ThreeDES {

	private static final String TRANSFORMATION = "DESede/ECB/PKCS5Padding";
	private static final String ENCRYPTION_ALGORITHM = "DESede";
	private static EllipticCurveKeyExample keyGen = new EllipticCurveKeyExample();
	
	public static void main(String[] args) throws Exception {
		String plainText = "Hello World!";
		
		KeyPair keyPair = keyGen.generateKeyPair();
		
		byte[] encodedPrivateKey = keyPair.getPrivate().getEncoded();
        byte[] encodedPublicKey = keyPair.getPublic().getEncoded();
        SecretKeySpec privateKey = new SecretKeySpec(encodedPrivateKey, 0, encodedPrivateKey.length, "DESede");
        SecretKeySpec publicKey = new SecretKeySpec(encodedPublicKey, 0, encodedPublicKey.length, "DESede");
        
		String key = "123456789012345678901234";
		
		byte[] encryptedText = encrypt(plainText, key);
		System.out.println("Encrypted text: " + new String(encryptedText, StandardCharsets.UTF_8));
		
		String decryptedText = decrypt(encryptedText, key);
		System.out.println("Decrypted text: " + decryptedText);
	}
	
	public static byte[] encrypt(String plainText, String key) throws Exception {
		Key desKey = new SecretKeySpec(key.getBytes(), ENCRYPTION_ALGORITHM);
		Cipher cipher = Cipher.getInstance(TRANSFORMATION);
		cipher.init(Cipher.ENCRYPT_MODE, desKey);
		return cipher.doFinal(plainText.getBytes(StandardCharsets.UTF_8));
	}

	public static String decrypt(byte[] encryptedText, String key) throws Exception {
		Key desKey = new SecretKeySpec(key.getBytes(), ENCRYPTION_ALGORITHM);
		Cipher cipher = Cipher.getInstance(TRANSFORMATION);
		cipher.init(Cipher.DECRYPT_MODE, desKey);
		byte[] decryptedBytes = cipher.doFinal(encryptedText);
		return new String(decryptedBytes, StandardCharsets.UTF_8);	
	}
}
