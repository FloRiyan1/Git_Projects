package test;

import java.math.BigInteger;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.SecureRandom;
import java.security.Security;

import org.bouncycastle.asn1.x9.ECNamedCurveTable;

public class EllipticCurveKeyExample {
    public static void main(String[] args) throws Exception {
        // Generate a key pair using the secp256r1 elliptic curve
        ECParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec("secp256r1");
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("EC", "BC");
        keyPairGenerator.initialize(ecSpec, new SecureRandom());
        KeyPair keyPair = keyPairGenerator.generateKeyPair();
        
        // Print the private and public keys
        System.out.println("Private key: " + keyPair.getPrivate().toString());
        ECPoint publicKey = ((org.bouncycastle.jce.interfaces.ECPublicKey) keyPair.getPublic()).getQ();
        System.out.println("Public key: " + publicKey.toString());
    }
}
