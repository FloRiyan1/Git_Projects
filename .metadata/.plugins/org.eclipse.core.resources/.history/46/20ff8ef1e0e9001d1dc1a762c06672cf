package verschluesselung.gui;

import javax.swing.JTextArea;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;

import java.awt.*;

import verschluesselung.service.KeyServiceImpl;
import verschluesselung.service.verschluesselungsServiceImpl;

public class Tool 
{
	private View gui;
	private String verschluesseltString;
	private String publicKeyString;
	private String privateKeyString;
	
	private verschluesselungsServiceImpl verschluesselungsService;
	private KeyServiceImpl keyService;

	public Tool(View gui)
	{
		this.gui = gui;
		keyService = new KeyServiceImpl();
		verschluesselungsService = new verschluesselungsServiceImpl(keyService);
	}
	
	public void connectToGui()
	{
		setLabelText();
		
		this.gui.txtPrivateKey.setEditable(false);
		this.gui.txtPublicKey.setEditable(false);
		this.gui.txtVerschluesselt.setEditable(false);

		this.gui.txtEingabe.getDocument().addDocumentListener(new DocumentListener() 
		{
            public void changedUpdate(DocumentEvent e) 
            {
                performAction();
            }
            
			public void removeUpdate(DocumentEvent e) 
			{
                performAction();
            }
        
			public void insertUpdate(DocumentEvent e) 
            {
                performAction();
            }
        });
	}
	
	public void updateGui()
	{
		this.gui.txtPrivateKey.setText(privateKeyString);
		this.gui.txtPublicKey.setText(publicKeyString);
		this.gui.txtVerschluesselt.setText(verschluesseltString);
		this.gui.txtPrivateKey.setText(privateKeyString);
		this.gui.txtPublicKey.setText(publicKeyString);

		makeLineBreak();
	
	}

	private void makeLineBreak() {
		
		List<JTextArea> textAreas = new ArrayList<>();
		for (iterable_type iterable_element : iterable) {
			
		}
		
		int numLines = this.gui.txtEingabe.getLineCount();
		if (numLines > 30) 
		{
			// Insert a line break at the end of the document
			int offset = this.gui.txtEingabe.getDocument().getLength();
			try 
			{
				this.gui.txtEingabe.getDocument().insertString(offset, "\n", null);
			} 
			catch (BadLocationException ex) 
			{
				ex.printStackTrace();
			}
		}
	}

	private void performAction() 
	{
		try
		{
			this.privateKeyString = keyService.getPrivateKeyDes();
			this.publicKeyString = keyService.getPublicKeyDes();
			this.verschluesseltString = new String(verschluesselungsService.encrypt(this.gui.txtEingabe.getText(), privateKeyString));
			
			updateGui();
		}
		catch (Exception e) 
		{
			e.printStackTrace();
		}
	}
	
	private void setLabelText() 
	{
		this.gui.lblEingabe.setText("Zu Verschlüsselnder Text:");
		this.gui.lblPrivateKey.setText("PrivateKey:");
		this.gui.lblPublicKey.setText("Public Key:");
		this.gui.lblVerschluesseld.setText("Verschlüsselter text:");
	}

	public String getPublicKeyString() {
		return publicKeyString;
	}

	public void setPublicKeyString(String publicKeyString) {
		this.publicKeyString = publicKeyString;
	}

	public String getPrivateKeyString() {
		return privateKeyString;
	}

	public void setPrivateKeyString(String privateKeyString) {
		this.privateKeyString = privateKeyString;
	}
	
	
}
