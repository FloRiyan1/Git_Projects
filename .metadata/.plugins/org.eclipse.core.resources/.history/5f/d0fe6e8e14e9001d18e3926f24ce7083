package test;

import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.SecureRandom;
import java.security.spec.ECGenParameterSpec;
import java.util.Base64;

public class EllipticCurveKeyExample {
	
	private KeyPair keyPair;
	
    private KeyPair generateKeyPair() throws Exception 
    {    	
    	String curveName = "secp256r1";
        KeyPairGenerator keyGen = KeyPairGenerator.getInstance("EC", "SunEC");
        ECGenParameterSpec ecSpec = new ECGenParameterSpec(curveName);
        keyGen.initialize(ecSpec, new SecureRandom());
        KeyPair keyPair = keyGen.generateKeyPair();

		return keyPair;
    }

	public KeyPair getKeyPair() throws Exception 
	{
		if(keyPair == null)
		{
			keyPair = generateKeyPair();
		}
		return keyPair;
	}
	
	 // Converts the private key of the EC key pair to a Base64-encoded string
    public String getKeyPairDes() throws Exception 
    {
        KeyPair ecKeyPair = getKeyPair();
        byte[] ecPrivateKey = ecKeyPair.getPrivate().getEncoded();
        byte[] desKey = new byte[24];
        System.arraycopy(ecPrivateKey, 0, desKey, 0, 24);

        return Base64.getEncoder().encodeToString(desKey);
    }
    
    // Converts a Base64-encoded string to the corresponding byte array
    public byte[] stringToByteArray(String str) 
    {
        return Base64.getDecoder().decode(str);
    }

}
