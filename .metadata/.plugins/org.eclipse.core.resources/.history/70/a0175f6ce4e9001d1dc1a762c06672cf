package verschluesselung.gui;

import javax.swing.JTextArea;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;

import java.util.*;

import verschluesselung.service.KeyServiceImpl;
import verschluesselung.service.verschluesselungsServiceImpl;

public class Tool 
{
	private View gui;
	private String verschluesseltString;
	private String publicKeyString;
	private String privateKeyString;
	
	private verschluesselungsServiceImpl verschluesselungsService;
	private KeyServiceImpl keyService;
	private List<JTextArea> textAreas;

	public Tool(View gui)
	{
		this.gui = gui;
		keyService = new KeyServiceImpl();
		verschluesselungsService = new verschluesselungsServiceImpl(keyService);
		textAreas = new ArrayList<>();
		textAreas.add(this.gui.txtEingabe);
		textAreas.add(this.gui.txtPrivateKey);
		textAreas.add(this.gui.txtPublicKey);
		textAreas.add(this.gui.txtVerschluesselt);
	}
	
	public void connectToGui()
	{
		setLabelText();
		
		this.gui.txtPrivateKey.setEditable(false);
		this.gui.txtPublicKey.setEditable(false);
		this.gui.txtVerschluesselt.setEditable(false);

		this.gui.txtEingabe.getDocument().addDocumentListener(new DocumentListener() 
		{
            public void changedUpdate(DocumentEvent e) 
            {
                performAction();
            }
            
			public void removeUpdate(DocumentEvent e) 
			{
                performAction();
            }
        
			public void insertUpdate(DocumentEvent e) 
            {
                performAction();
            }
        });
		
		this.gui.txtPrivateKey.getDocument().addDocumentListener(new DocumentListener() 
		{
			public void changedUpdate(DocumentEvent e) 
			{
			}
			
			public void removeUpdate(DocumentEvent e) 
			{
			}
			
			public void insertUpdate(DocumentEvent e) 
			{
			}
		});
		
		this.gui.txtPublicKey.getDocument().addDocumentListener(new DocumentListener() 
		{
			public void changedUpdate(DocumentEvent e) 
			{
			}
			
			public void removeUpdate(DocumentEvent e) 
			{
			}
			
			public void insertUpdate(DocumentEvent e) 
			{
			}
		});

		this.gui.txtVerschluesselt.getDocument().addDocumentListener(new DocumentListener() 
		{
			public void changedUpdate(DocumentEvent e) 
			{
			}
			
			public void removeUpdate(DocumentEvent e) 
			{
			}
			
			public void insertUpdate(DocumentEvent e) 
			{
			}
		});
	}
	
	public void updateGui()
	{
		this.gui.txtPrivateKey.setText(insertLineBreaks(privateKeyString));
		this.gui.txtPublicKey.setText(insertLineBreaks(publicKeyString));
		this.gui.txtVerschluesselt.setText(insertLineBreaks(verschluesseltString));
	}

	private void performAction() 
	{
		try
		{
			this.privateKeyString = keyService.getPrivateKeyDes();
			this.publicKeyString = keyService.getPublicKeyDes();
			this.verschluesseltString = new String(verschluesselungsService.encrypt(this.gui.txtEingabe.getText(), privateKeyString));
			
			updateGui();
		}
		catch (Exception e) 
		{
			e.printStackTrace();
		}
	}
	
	public String insertLineBreaks(String text) {
	    StringBuilder builder = new StringBuilder(text);
	    int i = 0;
	    while (i + 10 < builder.length()) {
	        i += 10;
	        builder.insert(i, "\n");
	        i++;
	    }
	    return builder.toString();
	}
	
	private void setLabelText() 
	{
		this.gui.lblEingabe.setText("Zu Verschlüsselnder Text:");
		this.gui.lblPrivateKey.setText("PrivateKey:");
		this.gui.lblPublicKey.setText("Public Key:");
		this.gui.lblVerschluesseld.setText("Verschlüsselter text:");
	}

	public String getPublicKeyString() {
		return publicKeyString;
	}

	public void setPublicKeyString(String publicKeyString) {
		this.publicKeyString = publicKeyString;
	}

	public String getPrivateKeyString() {
		return privateKeyString;
	}

	public void setPrivateKeyString(String privateKeyString) {
		this.privateKeyString = privateKeyString;
	}
	
	
}
