package test;

import java.math.BigInteger;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.Provider;
import java.security.SecureRandom;
import java.security.Security;
import java.security.spec.ECParameterSpec;
import java.util.Arrays;

import org.bouncycastle.asn1.x9.ECNamedCurveTable;
import org.bouncycastle.math.ec.ECPoint;
import org.bouncycastle.*;

public class EllipticCurveKeyExample {
    public static void main(String[] args) throws Exception {
//    	 // Print the available key pair generator algorithms and providers
//        System.out.println("Available key pair generator algorithms:");
//        String[] algorithms = KeyPairGenerator.getAlgorithms();
//        Arrays.sort(algorithms);
//        for (String algorithm : algorithms) {
//            System.out.println(algorithm);
//        }
//        System.out.println();
        
        System.out.println("Available providers:");
        Provider[] providers = Security.getProviders();
        Arrays.sort(providers, (p1, p2) -> p1.getName().compareToIgnoreCase(p2.getName()));
        for (Provider provider : providers) {
            System.out.println(provider.getName());
        }    	
    	
    	
//        // Generate a key pair using the secp256r1 elliptic curve
//        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("EC", "BC");
//        keyPairGenerator.initialize(1024, new SecureRandom());
//        KeyPair keyPair = keyPairGenerator.generateKeyPair();
//        
//        // Print the private and public keys
//        System.out.println("Private key: " + keyPair.getPrivate().toString());
    }
}
