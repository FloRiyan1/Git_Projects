package test;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.SecretKey;

import java.nio.charset.StandardCharsets;
import java.security.Key;
import java.security.KeyPair;
import java.util.Base64;

public class ThreeDES {

    private static final String TRANSFORMATION = "DESede/ECB/PKCS5Padding";
    private static final String ENCRYPTION_ALGORITHM = "DESede";

    public static void main(String[] args) throws Exception {
        EllipticCurveKeyExample keyGen = new EllipticCurveKeyExample();
        KeyPair ecKeyPair = keyGen.generateKeyPair();

        // Generate 3DES key from elliptic curve private key
        byte[] ecPrivateKey = ecKeyPair.getPrivate().getEncoded();
        byte[] desKey = new byte[24];
        System.arraycopy(ecPrivateKey, 0, desKey, 0, 24);

        // Encrypt message with 3DES key
        String message = "Hello, world!";
        Cipher encryptCipher = Cipher.getInstance(TRANSFORMATION);
        encryptCipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(desKey, ENCRYPTION_ALGORITHM));
        byte[] encryptedMessage = encryptCipher.doFinal(message.getBytes(StandardCharsets.UTF_8));

        // Decrypt message with 3DES key
        Cipher decryptCipher = Cipher.getInstance(TRANSFORMATION);
        decryptCipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(desKey, ENCRYPTION_ALGORITHM));
        byte[] decryptedMessage = decryptCipher.doFinal(encryptedMessage);

        System.out.println("Original message: " + message);
        System.out.println("Encrypted message: " + Base64.getEncoder().encodeToString(encryptedMessage));
        System.out.println("Decrypted message: " + new String(decryptedMessage));
    }
//
//    public static byte[] encrypt(String plainText, String key) throws Exception {
//        Key desKey = new SecretKeySpec(key.getBytes(), ENCRYPTION_ALGORITHM);
//        Cipher cipher = Cipher.getInstance(TRANSFORMATION);
//        cipher.init(Cipher.ENCRYPT_MODE, desKey);
//        return cipher.doFinal(plainText.getBytes(StandardCharsets.UTF_8));
//    }

    public static String decrypt(byte[] encryptedText, String key) throws Exception {
        Key desKey = new SecretKeySpec(key.getBytes(), ENCRYPTION_ALGORITHM);
        Cipher cipher = Cipher.getInstance(TRANSFORMATION);
        cipher.init(Cipher.DECRYPT_MODE, desKey);
        byte[] decryptedBytes = cipher.doFinal(encryptedText);
        return new String(decryptedBytes, StandardCharsets.UTF_8);
    }
}