package test;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

import java.nio.charset.StandardCharsets;
import java.security.Key;
import java.util.Base64;

public class ThreeDES {

    private static final String TRANSFORMATION = "DESede/ECB/PKCS5Padding";
    private static final String ENCRYPTION_ALGORITHM = "DESede";

    public byte[] encrypt(String plainText, String key) throws Exception {
        Key desKey = new SecretKeySpec(stringToByteArray(key), ENCRYPTION_ALGORITHM);
        Cipher cipher = Cipher.getInstance(TRANSFORMATION);
        cipher.init(Cipher.ENCRYPT_MODE, desKey);
        return cipher.doFinal(plainText.getBytes(StandardCharsets.UTF_8));
    }

    public String decrypt(byte[] encryptedText, String key) throws Exception {
    	Key desKey = new SecretKeySpec(stringToByteArray(key), ENCRYPTION_ALGORITHM);
        Cipher cipher = Cipher.getInstance(TRANSFORMATION);
        cipher.init(Cipher.DECRYPT_MODE, desKey);
        byte[] decryptedBytes = cipher.doFinal(encryptedText);
        return new String(decryptedBytes, StandardCharsets.UTF_8);
    }
    
    public byte[] stringToByteArray(String str) 
    {
        int len = str.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(str.charAt(i), 16) << 4)
                                 + Character.digit(str.charAt(i+1), 16));
        }
        return data;
    }

}